<?xml version="1.0" encoding="UTF-8"?>
<project name="YAWIK" default="install">

    <!-- build.properties can be set as an argument -->

    <!-- ============================================  -->
    <!-- Target: install                               -->
    <!-- ============================================  -->
    <target name="install" depends="prepare,init" description="reads build.properties and generates config files">
        <property name="target" value="config/autoload" override="true"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: Cleanup all                           -->
    <!-- ============================================  -->
    <target name="clean" description="removes build, log, cache, tmp, components and vendor dir">
        <delete dir="${project.basedir}/build"/>
        <delete dir="${project.basedir}/log"/>
        <delete dir="${project.basedir}/cache"/>
        <delete dir="${project.basedir}/tmp"/>
        <delete dir="${project.basedir}/vendor"/>
        <delete dir="${project.basedir}/components"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: prepare, creates log and cache dir    -->
    <!-- ============================================  -->
    <target name="prepare" depends="symlinks">
        <if>
            <not>
                <available file='${project.basedir}/log' type='dir' />
            </not>
            <then>
                <mkdir dir="${project.basedir}/log"/>
                <chmod file="${project.basedir}/log" mode="0777"/>
            </then>
        </if>
        <if>
            <not>
                <available file='${project.basedir}/config/autoload' type='dir' />
            </not>
            <then>
                <mkdir dir="${project.basedir}/config/autoload"/>
                <chmod file="${project.basedir}/config/autoload" mode="0777"/>
            </then>
        </if>
        <if>
            <not>
                <available file='${project.basedir}/cache/DoctrineMongoODMModule/Hydrator' type='dir' />
            </not>
            <then>
                <mkdir dir="${project.basedir}/cache/DoctrineMongoODMModule/Hydrator"/>
                <chmod file="${project.basedir}/cache/DoctrineMongoODMModule/Hydrator" mode="0777"/>
            </then>
        </if>
        <if>
            <not>
                <available file='${project.basedir}/cache/DoctrineMongoODMModule/Proxy' type='dir' />
            </not>
            <then>
                <mkdir dir="${project.basedir}/cache/DoctrineMongoODMModule/Proxy"/>
                <chmod file="${project.basedir}/cache/DoctrineMongoODMModule/Proxy" mode="0777"/>
            </then>
        </if>
        <chmod file="${project.basedir}/cache/"  mode="0777"/>
        <if>
            <not>
                <available file='${project.basedir}/build' type='dir' />
            </not>
            <then>
                <mkdir dir="${project.basedir}/build"/>
                <chmod file="${project.basedir}/build" mode="0777"/>
            </then>
        </if>
        <if>
            <not>
                <available file='${project.basedir}/vendor' type='dir' />
            </not>
            <then>
                <exec executable="php" passthru="true">
                    <arg value="${project.basedir}/composer.phar"/>
                    <arg value="install"/>
                </exec>
            </then>
        </if>
    </target>



    <!-- ============================================  -->
    <!-- Target: build                                 -->
    <!-- ============================================  -->
    <target name="build" depends="prepare,translate"
            description="build tgz and zip packages">
        <delete dir="${project.basedir}/build"/>

        <copy todir="${builddir}">
            <fileset refid="core"/>
        </copy>

        <copy todir="${builddir}/public">
            <fileset refid="awesomefonts"/>
        </copy>
        
        <copy todir="${builddir}/public">
            <fileset refid="flags"/>
        </copy>

        <mkdir dir="${builddir}/public/js/jquery-file-upload"/>
        <copy todir="${builddir}/public/js/jquery-file-upload">
            <fileset refid="blueimp"/>
        </copy>

        <mkdir dir="${builddir}/public/js/tinymce"/>
        <copy todir="${builddir}/public/js/tinymce">
            <fileset refid="tinymce"/>
        </copy>

        <copy file="${project.basedir}/module/Jobs/config/channel.options.local.php.dist" tofile="${builddir}/config/autoload/channel.options.local.php"/>
        <copy file="${project.basedir}/module/Core/config/module.core.options.local.php.dist" tofile="${builddir}/config/autoload/module.core.options.local.php"/>


        <copy file="${vendordir}/components/jquery/jquery.min.js" tofile="${builddir}/public/js/jquery.min.js"/>
        <copy file="${vendordir}/twitter/typeahead.js/dist/bloodhound.min.js" tofile="${builddir}/public/js/bloodhound.min.js"/>
        <copy file="${vendordir}/twitter/typeahead.js/dist/typeahead.jquery.min.js" tofile="${builddir}/public/js/typeahead.jquery.min.js"/>
        <copy file="${vendordir}/cross-solution/bootstrap3-dialog/examples/assets/bootstrap-dialog/js/bootstrap-dialog.min.js"  tofile="${builddir}/public/js/bootstrap-dialog.min.js"/>
        <copy file="${vendordir}/cross-solution/bootstrap3-dialog/examples/assets/bootstrap-dialog/css/bootstrap-dialog.min.css" tofile="${builddir}/public/css/bootstrap-dialog.min.css"/>

        <copy file="${vendordir}/twbs/bootstrap/dist/js/bootstrap.min.js" tofile="${builddir}/public/js/bootstrap.min.js"/>
        <copy file="${vendordir}/ivaynberg/select2/dist/js/select2.min.js" tofile="${builddir}/public/js/select2.min.js"/>
        <copy file="${vendordir}/ivaynberg/select2/dist/css/select2.css" tofile="${builddir}/public/css/select2.css"/>
        <copy file="${project.basedir}/module/Geo/public/js/jquery.geolocationfield.photon.js" tofile="${builddir}/public/Geo/js/jquery.geolocationfield.photon.js"/>
        <copy file="${project.basedir}/module/Geo/public/js/jquery.geolocationfield.geo.js" tofile="${builddir}/public/Geo/js/jquery.geolocationfield.geo.js"/>
        <copy file="${project.basedir}/public/js/jquery.bootstrapwizard.min.js" tofile="${builddir}/public/js/jquery.bootstrapwizard.min.js"/>

        <mkdir dir="${builddir}/log"/>
        <chmod file="${builddir}/log" mode="0777"/>
        <mkdir dir="${builddir}/cache"/>
        <chmod file="${builddir}/cache" mode="0777"/>
        <mkdir dir="${builddir}/cache/DoctrineMongoODMModule/Hydrator"/>
        <chmod file="${builddir}/cache/DoctrineMongoODMModule/Hydrator" mode="0777"/>
        <mkdir dir="${builddir}/cache/DoctrineMongoODMModule/Proxy"/>
        <chmod file="${builddir}/cache/DoctrineMongoODMModule/Proxy" mode="0777"/>
        <mkdir dir="${builddir}/cache/HtmlPurifier"/>
        <chmod file="${builddir}/cache/HtmlPurifier" mode="0777"/>
        <mkdir dir="${builddir}/config/autoload"/>
        <chmod file="${builddir}/config/autoload" mode="0777"/>
        <echo file="${builddir}/VERSION" append="false">${version}</echo>

        <symlink link="build/YAWIK-${version-short}/public/Applications" target="../module/Applications/public" />
        <symlink link="build/YAWIK-${version-short}/public/Auth" target="../module/Auth/public" />
        <symlink link="build/YAWIK-${version-short}/public/Core" target="../module/Core/public" />
        <symlink link="build/YAWIK-${version-short}/public/Jobs" target="../module/Jobs/public" />
        <symlink link="build/YAWIK-${version-short}/public/Organizations" target="../module/Organizations/public" />
        <symlink link="build/YAWIK-${version-short}/public/Settings" target="../module/Settings/public" />

        <copy file="${project.basedir}/module/Core/view/layout/layout.phtml" toFile="${builddir}/module/Core/view/layout/layout.phtml" overwrite="true">
            <filterchain>
                <replaceregexp>
                    <regexp pattern='&lt;version>.*?&lt;/version>' replace="${version}" multiline="true" />
                </replaceregexp>
            </filterchain>
        </copy>

        <echo msg="generate YAWIK-${version-short}.zip and YAWIK-${version-short}.tgz"/>
        <exec dir="${builddir}/.." command="tar -czpf YAWIK-${version-short}.tgz YAWIK-${version-short}" logoutput="false"/>
        <exec dir="${builddir}/.." command="zip -r YAWIK-${version-short}.zip YAWIK-${version-short}" logoutput="false"/>

    </target>

    <!-- ============================================  -->
    <!-- Target: generate autoload config files        -->
    <!-- ============================================  -->
    <target name="generate-autoload-config" depends="load-properties">
        <property name="target" value="config/autoload" override="true"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: translate                             -->
    <!-- ============================================  -->
    <target name="translate" depends="init,prepare,filesets" description="compiles all languages *.po files">
        <echo msg="Compile locales ${locales} ..."/>
        <foreach param="filename" absparam="absfilename" target="compile-po-file">
            <mapper type="regexp" from="^(.*)\.po" to="\1"/>
            <fileset refid="languages"/>
        </foreach>
    </target>

    <target name="compile-po-file">
        <echo msg="Translate ${filename}"/>
        <exec command="msgfmt -cv -o ${project.basedir}/module/${filename}.mo ${absfilename}"
              logoutput="true" dir="."/>
    </target>

    <!-- ============================================  -->
    <!-- Target: docs                                  -->
    <!-- ============================================  -->

    <target name="docs" depends="init,phpdoc" description="build api docs">
        <tar destfile="build/YAWIK-docs-${version-short}.tgz"
             basedir="${project.basedir}/docs"
             compression="gzip" />
        <echo msg="exec: zip -r  YAWIK-${version-short}.zip YAWIK"/>
        <exec dir="${builddir}/.." command="zip -r  YAWIK-${version-short}.zip YAWIK" logoutput="false"/>

    </target>
    <!-- ============================================  -->
    <!-- Target: symlinks                              -->
    <!-- ============================================  -->
    <target name="symlinks">
        <symlink link="public/Core" target="../module/Core/public" overwrite="true"/>
        <symlink link="public/Applications" target="../module/Applications/public" overwrite="true"/>
        <symlink link="public/Auth" target="../module/Auth/public" overwrite="true"/>
        <symlink link="public/Jobs" target="../module/Jobs/public" overwrite="true" />
        <symlink link="public/Settings" target="../module/Settings/public" overwrite="true" />
        <symlink link="public/Organizations" target="../module/Organizations/public" overwrite="true" />
        <symlink link="public/Geo" target="../module/Geo/public" overwrite="true" />
    </target>

    <!-- ============================================  -->
    <!-- Target: phpdoc                                -->
    <!-- ============================================  -->
    <target name="phpdoc" depends="prepare" description="build api docs using phpdoc">
        <exec command="rm -R ./tmp" dir="."/>
        <exec command="phpdoc" dir="." passthru="true"/>
    </target>

    <target name="deploy-docs" description="publish API docs via rsync">
        <property file="${project.basedir}/build.properties" />
        <echo msg="deploy: rsync -r ${project.basedir}/docs/ ${deploy.ssh.user}@${deploy.ssh.host}:${deploy.docs.target}"/>
        <exec command="rsync -rv ${project.basedir}/docs/ ${deploy.ssh.user}@${deploy.ssh.host}:${deploy.docs.target}" passthru="true"/>
    </target>

    <target name="deploy-builds" depends="preinit" description="publish TGZ and ZIP packages via rsync">
        <echo msg="deploy: rsync -r ${project.basedir}/build/ ${deploy.build.user}@${deploy.build.host}:${deploy.build.target}${version-short}"/>
        <exec command="rsync -rv
    ${project.basedir}/build/YAWIK-${version-short}.* -l --exclude=YAWIK ${deploy.build.user}@${deploy.build.host}:${deploy.build.target}${version-short}" passthru="true"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: phpunit                               -->
    <!-- ============================================  -->
    <target name="phpunit" depends="prepare" description="run phpunit tests">
        <exec command="vendor/phpunit/phpunit/phpunit -c ${project.basedir}/test/phpunit.xml"
              logoutput="/dev/stdout"/>
    </target>

    <target name="filesets">
        <!-- ============================================  -->
        <!-- defines various filesets                      -->
        <!-- ============================================  -->

        <fileset id="core" dir="${project.basedir}">
            <include name="module/**"/>
            <include name="public/**"/>
            <include name="bin/console"/>
            <include name="config/config.php"/>
            <include name="vendor/autoload.php"/>
            <include name="vendor/composer/**"/>
            <include name="vendor/zendframework/**"/>
            <include name="vendor/container-interop/**"/>
            <include name="vendor/hybridauth/**"/>
            <include name="vendor/doctrine/**"/>
            <include name="vendor/symfony/polyfill-mbstring/**"/>
            <include name="vendor/jmikola/geojson/src/**"/>
            <include name="vendor/kriswallsmith/assetic/src/**"/>
            <include name="vendor/ezyang/htmlpurifier/library/**"/>
            <include name="vendor/mikemix/zf2htmlpurifier/src/**"/>
            <include name="vendor/mpdf/**"/>
            <include name="LICENCE"/>
            <include name="README"/>
            <exclude name="public/js/*"/>
            <exclude name="**/YawikDemo*/**"/>
            <exclude name="**/YawikXingVendorApi/**"/>
            <exclude name="**/YawikCompanyRegistration/**"/>
            <exclude name="**/CamMediaintown/**"/>
            <exclude name="**/NextKraftwerke/**"/>
            <exclude name="**/JobsDeutschland/**"/>
            <exclude name="**/Karrierelounge/**"/>
            <exclude name="**/Greenjobs/**"/>
            <exclude name="**/Karriere24/**"/>
            <exclude name="**/Phoenixdesign/**"/>
            <exclude name="**/PxSkin/**"/>
            <exclude name="public/Applications"/>
            <exclude name="public/Auth"/>
            <exclude name="public/Core"/>
            <exclude name="public/Geo"/>
            <exclude name="public/js/bloodhound.min.js"/>
            <exclude name="public/js/typeahead.jquery.min.js"/>
            <exclude name="public/css/bootstrap-dialog.min.css"/>
            <exclude name="public/Jobs"/>
            <exclude name="public/Organizations"/>
            <exclude name="**/*.po"/>
            <exclude name="**/*.pot"/>
            <exclude name="**/language/_annotated_strings.php"/>
            <exclude name="public/fonts"/>
            <exclude name="public/flags"/>
            <exclude name="public/js/jquery-file-upload**"/>
            <exclude name="public/css/select2**"/>
        </fileset>
        <fileset id="languages" dir="${project.basedir}/module">
            <include name="**/**.po"/>
        </fileset>

        <fileset id="awesomefonts" dir="${vendordir}/fortawesome/font-awesome">
            <include name="fonts/*"/>
        </fileset>
        
        <fileset id="flags" dir="${vendordir}/components/flag-icon-css">
            <include name="flags/**"/>
        </fileset>

        <fileset id="blueimp" dir="${vendordir}/blueimp/jquery-file-upload/js">
            <include name="jquery.iframe-transport.js"/>
            <include name="jquery.fileupload.js"/>
            <include name="vendor/jquery.ui.widget.js"/>
        </fileset>

        <fileset id="tinymce" dir="${vendordir}/tinymce/tinymce">
            <include name="**/*"/>
        </fileset>
    </target>

    <target name="preinit">
        <property file="${project.basedir}/build.properties" />
        <exec outputProperty="version" command="git describe --tags" dir="${project.basedir}"/>
        <exec outputProperty="version-short"  command="git describe --tags --abbrev=0 | sed -E -n 's/v(.*)/\1/p'"
              dir="${project.basedir}"/>
    </target>

    <target name="init"
            depends="preinit, prepare"
            unless="project.initialized">
        <exec outputProperty="version" command="git describe --tags" dir="${project.basedir}"/>
        <exec outputProperty="version-short"
              command="git describe --tags --abbrev=0 | sed -E -n 's/v(.*)/\1/p'"
              dir="${project.basedir}"/>
        <exec outputProperty="external.app.key"
              command="php -r 'echo uniqid(md5(microtime()));'"
              dir="${project.basedir}"/>
        <property name="builddir"
                  value="./build/${phing.project.name}-${version-short}"
                  override="false"/>
        <property name="vendordir" value="./vendor" override="false"/>
        <!-- Set property to prevent target from being executed multiple times -->
        <property name="project.initialized" value="true"/>
    </target>

    <target name="load-properties">
        <!-- first loop over all module properties files -->
        <foreach param="dirname" absparam="absname" target="load-properties-subtask">
            <fileset dir="module">
                <type type="dir" />
                <depth max="0" min="0" />
            </fileset>
        </foreach>
        <!-- then read the global properties file -->
        <property file="${project.basedir}/${build.properties}" />
    </target>

    <target name="load-properties-subtask">
        <property name="properties" value="${absname}/config/build.properties" />
        <available file="${properties}" type="file" property="build.properties.exists" />
        <if>
            <equals arg1="${build.properties.exists}" arg2="true" />
            <then>
                <echo>load ${properties}</echo>
                <property file="${properties}" />
            </then>
            <else>
                <echo>no ${properties} found. Check for a .dist file</echo>
                <available file="${absname}/config/build.properties.dist" type="file" property="build.properties.dist.exists" />
                <if>
                    <equals arg1="${build.properties.dist.exists}" arg2="true" />
                    <then>
                        <copy file="${absname}/config/build.properties.dist" tofile="${properties}" overwrite="true"/>
                        <property file="${properties}" />
                    </then>
                </if>
                <!-- If file doesn't exist -->
            </else>
        </if>

        <available file="${absname}/build.xml" type="file" property="build.Exists" />
        <if>
            <isset property="build.Exists"/>
            <then>
                <phing phingfile="${absname}/build.xml" inheritAll="false"
                       inheritRefs="false" haltonfailure="true"/>
            </then>
            <else>
                <echo>${absname}/build.xml not found</echo>
            </else>
        </if>
        <if>
            <istrue value="${YAWIK.bundled}"/>
            <then>
                <property name="modules[]" value="${dirname}" />
                <echo>Bundled: ${YAWIK.bundled} Module: ${dirname}</echo>
            </then>
        </if>
    </target>

    <!-- =======================================================  -->
    <!-- check requirements. A build.properties files is needed   -->
    <!-- =======================================================  -->
    <target name="check-requirements">
        <property name="build.properties" value="build.properties" override="false"/>
        <if>
            <not>
                <os family="unix" />
            </not>
            <then>
                <echo message="This build.xml is only tested on unix. Please give feedback, if this build.xml is not working on your OS" level="warning"/>
            </then>
        </if>

    </target>
</project>


